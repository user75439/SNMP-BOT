import asyncio
import sqlite3
from typing import Dict, List, Tuple

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from pysnmp.hlapi import SnmpEngine, CommunityData, UdpTransportTarget, ContextData, ObjectType, ObjectIdentity, getCmd, setCmd

from cable_diag import run_cable_diag

DB_PATH = "switches.db"
user_search_cache: Dict[int, List[Tuple[str, str, str, str]]] = {}
DEFAULT_PORT = "1/0/1"
BOT_TOKEN = "YOUR_BOT_TOKEN"  # ‚Üê –≤—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω


# ---------------------------------------------------------------------------
# /start
# ---------------------------------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/search <ip/–∏–º—è/–∞–¥—Ä–µ—Å> ‚Äî –ø–æ–∏—Å–∫ –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–æ–≤\n"
        "/diagnose <–Ω–æ–º–µ—Ä> <–ø–æ—Ä—Ç?> ‚Äî –∫–∞–±–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    )


# ---------------------------------------------------------------------------
# /search
# ---------------------------------------------------------------------------
async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /search <ip/–∏–º—è/–∞–¥—Ä–µ—Å>")
        return

    query = " ".join(context.args)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT ip, name, descr, loc FROM switches
        WHERE ip LIKE ? OR name LIKE ? OR loc LIKE ?
        """,
        (f"%{query}%",) * 3,
    )
    results = cursor.fetchall()
    conn.close()

    if not results:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    user_search_cache[update.effective_user.id] = results

    text = "üîé –ù–∞–π–¥–µ–Ω–æ:\n\n" + "".join(
        f"{idx}. {ip} | {name} | {descr} | {loc}\n"
        for idx, (ip, name, descr, loc) in enumerate(results[:20], 1)
    )
    text += "\n‚ú≥Ô∏è /diagnose <–Ω–æ–º–µ—Ä> <–ø–æ—Ä—Ç?>"

    await update.message.reply_text(text)


# ---------------------------------------------------------------------------
# /diagnose
# ---------------------------------------------------------------------------
async def diagnose_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_search_cache:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π /search")
        return

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /diagnose <–Ω–æ–º–µ—Ä> <–ø–æ—Ä—Ç?>")
        return

    idx = int(context.args[0]) - 1
    port = context.args[1] if len(context.args) > 1 else DEFAULT_PORT

    records = user_search_cache[user_id]
    if idx < 0 or idx >= len(records):
        await update.message.reply_text("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ /search")
        return

    ip, name, descr, loc = records[idx]

    # ---------- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–º–µ–π—Å—Ç–≤–æ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –º–æ–¥–µ–ª–∏ ----------
    descr_clean = descr.upper().replace("-", "").replace("_", "").strip()
    if "SNR" in descr_clean:
        family = "snr"
    elif any(prefix in descr_clean for prefix in ("DCS", "DES", "DGS")):
        family = "dlink"
    else:
        await update.message.reply_text(f"üòï –ú–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {descr}")
        return
    # --------------------------------------------------------------

    await update.message.reply_text(
        f"üì° –ó–∞–ø—É—Å–∫–∞—é –∫–∞–±–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–∞ {name} ({ip}), –ø–æ—Ä—Ç {port}‚Ä¶"
    )

    loop = asyncio.get_running_loop()
    result: str = await loop.run_in_executor(None, run_cable_diag, ip, port, family)

    await update.message.reply_text(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:\n{result}")


# ---------------------------------------------------------------------------
# main
# ---------------------------------------------------------------------------

def main():
    app = ApplicationBuilder().token("7940417537:AAFVqzuYTPEIWo7JbEMwAS92c2sjFyEGGjY").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(CommandHandler("diagnose", diagnose_command))

    print("‚úÖ SNMP‚Äë–±–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    app.run_polling()


if __name__ == "__main__":
    main()
